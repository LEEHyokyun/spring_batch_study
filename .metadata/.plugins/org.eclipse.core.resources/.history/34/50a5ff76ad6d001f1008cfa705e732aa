package com.kakao.project.customer.batch;

import org.springframework.batch.core.Step;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.job.builder.JobBuilder;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.boot.autoconfigure.batch.BatchProperties.Job;
import org.springframework.context.annotation.Bean;
import org.springframework.transaction.PlatformTransactionManager;

/*
 * 배치 클래스는 도메인 + 명사 + 명사에 행해지는 행위(동사) + DTO명으로 구성하여
 * 배치 클래스의 목적을 쉽게 알 수 있도록 설정합니다.
 * */
public class CustomerFilteringBatch extends AbstractCustomerFilteringBatch{
	
	/*
	 * 배치의 작업방식 중 순차적, 단일 트랜잭션 수행 방식인 Tasklet은 적합하지 않음으로 판단하여,
	 * 대용량 데이터 처리 및 중복 데이터 발생 시 
	 * */
	public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception {
        System.out.println("배치가 실행되었습니다!");
        return RepeatStatus.FINISHED;
    }
	
	@Bean(name = "customerWatchListFilteringJob")
  public Job customerWatchListFilteringJob(JobRepository jobRepository, Step customerWatchListFilteringStep) {
       
		//배치에서 수행할 JOB을 정의합니다.
		Job job = (Job) new JobBuilder("customerWatchListFilteringJob", jobRepository)
                 .start(customerWatchListFilteringStep)
                 .build();
       
       return job;
  }
	
	@Bean
  public Step customerWatchListFilteringStep(JobRepository jobRepository, PlatformTransactionManager platformTransactionManager) {
       
		//JOB에서 수행할 step을 정의합니다.
		return StepBuilder("testStep", jobRepository)
              .tasklet(
                      (contribution, chunkContext) -> {
                    	  //step with chunck range
                          return RepeatStatus.FINISHED;
                      },
                      platformTransactionManager
              )
              .build();
       
  }
	
}


