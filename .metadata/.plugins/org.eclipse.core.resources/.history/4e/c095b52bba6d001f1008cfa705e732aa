package com.kakao.project.customer.batch;

import org.springframework.batch.core.Step;
import org.springframework.batch.core.job.builder.JobBuilder;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.batch.BatchProperties.Job;
import org.springframework.context.annotation.Bean;
import org.springframework.transaction.PlatformTransactionManager;

import com.kakao.project.file.service.FileFindingService;

/*
 * 배치 클래스는 도메인 + 명사 + 명사에 행해지는 행위(동사) + DTO명으로 구성하여
 * 배치 클래스의 목적을 쉽게 알 수 있도록 설정합니다.
 * */
public class CustomerFilteringBatch extends AbstractCustomerFilteringBatch{
  
  @Autowired
  private FileFindingService fileFindingService;
  
  /*
   * 배치의 작업방식 중 순차적, 단일 트랜잭션 수행 방식인 Tasklet은 적합하지 않음으로 판단하여,
   * 대용량 데이터 처리 및 오류가 발생하여도 청크마다 트랜잭션을 완료하는 chunk 방식으로 진행하고자 합니다.
   * */
  @Bean(name = "customerWatchListFilteringJob")
  public Job customerWatchListFilteringJob(JobRepository jobRepository, Step customerWatchListFilteringStep) {
       	
	    //서비스를 import하면 트랜잭션이 나뉘어져 단일화가 불가능하지만, 이 경우 조회이므로 Mapper가 아닌 service를 바로 import하여 사용하고자 합니다.
	  fileFindingService.selectFileFindingList()
	  	
		//배치에서 수행할 JOB을 정의합니다.
		Job job = (Job) new JobBuilder("customerWatchListFilteringJob", jobRepository)		
                 .start(customerWatchListFilteringStep)
                 .next(customerWatchListFilteringStep)
                 .build();
       
       return job;
  }
	
  @Bean
  public Step customerWatchListFilteringStep(JobRepository jobRepository, PlatformTransactionManager platformTransactionManager) {
       
		//JOB에서 수행할 step을 정의합니다.
		Step step = new StepBuilder("testStep", jobRepository)
                    .tasklet(
                    		(contribution, chunkContext) -> {
                    	    /*
                    	     * step 수행
                    	     * */
                    		System.out.println("배치가 실행되었습니다!");
                    			
                    		/*
                    		 * step 수행
                    		 * */	
                            return RepeatStatus.FINISHED;
                    		},
                    		platformTransactionManager
                    )
              .build();
       
       return step;
  }
  
  //로직의 구조화 및 가독성, 사용 목적 파악을 용이하게 하고자 파일 파싱 대상에 대해 조회하는 함수를 별도 구성합니다.
  private List<>
	
}


